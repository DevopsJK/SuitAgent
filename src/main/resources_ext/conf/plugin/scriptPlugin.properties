step = 30

# 支持脚本类型：python、shell（Linux）
# type：[必须] [python 或 shell] 执行脚本类型，python或shell
# stepCycle：[可选] [默认1] 脚本执行周期，正整数。最后的执行周期为 step * stepCycle (秒)。
# path：[必须] 执行脚本的绝对路径
# result：[必须] [number,json] 该脚本执行返回结果方式。number：输出一个数字；json：直接输出需要上报的json数据，json数据格式见下方说明。
# metric：[可选，number类型使用] 该脚本执行后的结果采集后上报的指标名称
# tags：[可选，number类型使用] 自定义上报的tag，多个tag用||分隔，格式为：key1->value1||key2->value2
# counterType：[可选，number类型使用] [GAUGE 或 COUNTER] [默认GAUGE] 数据采集类型。GAUGE：上传什么样的值，就原封不动的存储 COUNTER：存储和展现的时候，会被计算为speed，即（当前值 - 上次值）/ 时间间隔


# json格式：
#	[
#		{
#		"metric": "test-metric",
#		"value": 1,
#		"counterType": "GAUGE",
#		"tags": "idc=lg,loc=beijing"
#		},
#		{
#		"metric": "test-metric2",
#		"value": 2,
#		"counterType": "COUNTER",
#		"tags": "idc=lg,loc=beijing"
#		}
#	]
#
# GAUGE : 用户上传什么样的值，就原封不动的存储
# COUNTER : 指标在存储和展现的时候，会被计算为speed，即（当前值 - 上次值）/ 时间间隔


# 例如（number类型脚本）：
# script.1 = type=shell,stepCycle=1,path=/root/test.sh,metric=Script_Test_1,result=number,tags=key1->value1
# script.2 = type=python,stepCycle=2,path=/root/test2.py,metric=Script_Test_2,result=number,tags=key2->value2
#
# 例如（json类型脚本）：
# script.3 = type=shell,stepCycle=1,path=/root/test.sh,result=json
# script.4 = type=python,stepCycle=2,path=/root/test2.py,result=json
#

# test1.sh脚本内容 ： echo 1
# test2.py脚本内容 ： print(1)

# test3.sh脚本内容 ： echo "[{\"metric\": \"test-metric\",\"value\": 1,\"counterType\": \"GAUGE\",\"tags\": \"idc=lg,loc=beijing\"}]"
# test4.py脚本内容 ： print("{\"metric\": \"test-metric\",\"value\": 1,\"counterType\": \"GAUGE\",\"tags\": \"idc=lg,loc=beijing\"}")
